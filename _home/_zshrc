#! /usr/bin/zsh

export GPG_TTY=$(tty)

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

autoload -U compinit && compinit

# yay -S zsh-antidote to install antidote on archlinux
source '/usr/share/zsh-antidote/antidote.zsh'
antidote load ~/dotfile/zsh_plugins.txt

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"
# install vivid via `pacman -S vivid` to support ls-colors
which vivid &> /dev/null
if [ $? -eq 0 ];then
  export LS_COLORS=$(vivid generate molokai 2>/dev/null)
fi

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# User configuration

export NPM_PACKAGES="$HOME/.local"
export PATH=$HOME/.local/bin:$HOME/.cargo/bin:/usr/local/bin:$PATH:/usr/lib/emscripten
export PATH=$PATH:/opt/flutter/bin
export PATH=$PATH:$HOME/go/bin
export MANPATH="$HOME/.local/share/man:/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
export EDITOR='nvim'
# else
#   export EDITOR='mvim'
# fi
if [ -z "$SSH_AUTH_SOCK" ]; then
  export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh"
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export JAVA_HOME=/usr/lib/jvm/default
export LIBVIRT_DEFAULT_URI=qemu:///system

# alias dia="dia --integrated"
alias ls="ls --color=auto"

# added by travis gem
[ -f /home/lsm/.travis/travis.sh ] && source /home/lsm/.travis/travis.sh

which go &> /dev/null
if [ $? -eq 0 ]; then
    go env -w GO111MODULE=on
fi

alias ap="ansible-playbook -i ~/work/hosts/home --ask-vault-pass"
alias ansible-vault="EDITOR='vault-vim' ansible-vault"

if [ ! -e $HOME/.cargo/cross-registry/x86_64 ]; then
  mkdir -p $HOME/.cargo/cross-registry/x86_64
fi
alias rust-x86_64='podman run --rm -it -v "$HOME/.cargo/cross-registry/x86_64":/root/.cargo/registry -v "$(pwd)":/home/rust/src docker.io/messense/rust-musl-cross:x86_64-musl'
if [ ! -e $HOME/.cargo/cross-registry/mips ]; then
  mkdir -p $HOME/.cargo/cross-registry/mips
fi
alias rust-mips='podman run --rm -it -v "$HOME/.cargo/cross-registry/mips":/root/.cargo/registry -v "$(pwd)":/home/rust/src docker.io/messense/rust-musl-cross:mips-musl'

alias butane='podman run --rm --interactive       \
              --security-opt label=disable        \
              --volume ${PWD}:/pwd --workdir /pwd \
              quay.io/coreos/butane:release'

alias egrep='grep -E'


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if [ -z "$SSH_TTY" ]; then
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
else
  [[ ! -f ~/.remote_p10k.zsh ]] || source ~/.remote_p10k.zsh
fi

export CHROME_EXECUTABLE=/usr/bin/chromium
export VAGRANT_DEFAULT_PROVIDER=libvirt

export AUTHOR_EMAIL='lisongmin@protonmail.com'

# { Config flutter with rust environment
export ANDROID_HOME="$HOME/Android/Sdk"
mkdir -p ~/.gradle
if [ ! -e ~/.gradle/gradle.properties ] || ! grep -q "ANDROID_NDK" ~/.gradle/gradle.properties ; then
  echo "ANDROID_NDK=$ANDROID_HOME/ndk" >> ~/.gradle/gradle.properties
fi

if ! pacman -Q cargo-ndk &>/dev/null ; then
  echo "Install cargo-ndk ..."
  sudo pacman -S --noconfirm cargo-ndk
fi

if ! pacman -Q rustup &>/dev/null ; then
  sudo pacman -S --noconfirm rustup

  rustup toolchain install stable &>/dev/null

  # android and ios support
  rustup target add aarch64-linux-android \
    x86_64-linux-android \
    aarch64-apple-ios \
    x86_64-apple-ios \
    aarch64-apple-ios-sim &>/dev/null
fi

# windows and linux desktop support
if ! pacman -Q corrosion &>/dev/null ; then
  sudo pacman -S --noconfirm corrosion
fi
# }

# Provide z command
eval "$(zoxide init zsh)" &>/dev/null

which direnv &> /dev/null
if [ $? -eq 0 ]; then
  eval "$(direnv hook zsh)" &>/dev/null
fi

attach_poetry_shell() {
  if [ -e "$PWD/poetry.lock" ]; then
    poetry shell -q
    return 0 
  fi
  if [ -e "$PWD/uv.lock" ]; then
    source "$PWD/.venv/bin/activate"
    return 0
  fi
}

add-zsh-hook chpwd attach_poetry_shell

update_tmux_env() {
  if [ -z "$TMUX" ]; then
    return
  fi

  envs=$(tmux show-environment)
  for e in $envs ; do
    echo "$e" | grep -q "^-"
    if [ $? -ne 0 ]; then
      export "$e"
    fi
  done
}

add-zsh-hook preexec update_tmux_env

[ "$TERM" = "xterm-kitty" ] && alias ssh="kitty +kitten ssh"

alias .j='just --justfile /home/lsm/dotfile/Justfile --working-directory .'
alias b='just --justfile /workspace/a-light.win/builder/justfile --working-directory .'
alias rgi='rg --no-ignore'

# bun completions
[ -s "/home/lsm/.local/share/reflex/bun/_bun" ] && source "/home/lsm/.local/share/reflex/bun/_bun"

# bun
export BUN_INSTALL="$HOME/.local/share/reflex/bun"
export PATH="$BUN_INSTALL/bin:$PATH"

fpath+=~/.zfunc; autoload -Uz compinit; compinit

zstyle ':completion:*' menu select
